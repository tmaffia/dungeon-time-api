// Code generated by mockery v2.44.1. DO NOT EDIT.

package service_mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	service "github.com/tmaffia/dungeon-time-api/internal/service"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// GetUserByEmail provides a mock function with given fields: _a0, _a1
func (_m *UserService) GetUserByEmail(_a0 context.Context, _a1 string) (*service.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *service.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*service.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *service.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type UserService_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *UserService_Expecter) GetUserByEmail(_a0 interface{}, _a1 interface{}) *UserService_GetUserByEmail_Call {
	return &UserService_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", _a0, _a1)}
}

func (_c *UserService_GetUserByEmail_Call) Run(run func(_a0 context.Context, _a1 string)) *UserService_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_GetUserByEmail_Call) Return(_a0 *service.User, _a1 error) *UserService_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (*service.User, error)) *UserService_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: _a0, _a1
func (_m *UserService) GetUserByID(_a0 context.Context, _a1 int32) (*service.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *service.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (*service.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) *service.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type UserService_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int32
func (_e *UserService_Expecter) GetUserByID(_a0 interface{}, _a1 interface{}) *UserService_GetUserByID_Call {
	return &UserService_GetUserByID_Call{Call: _e.mock.On("GetUserByID", _a0, _a1)}
}

func (_c *UserService_GetUserByID_Call) Run(run func(_a0 context.Context, _a1 int32)) *UserService_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *UserService_GetUserByID_Call) Return(_a0 *service.User, _a1 error) *UserService_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetUserByID_Call) RunAndReturn(run func(context.Context, int32) (*service.User, error)) *UserService_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function with given fields: _a0, _a1
func (_m *UserService) GetUserByUsername(_a0 context.Context, _a1 string) (*service.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *service.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*service.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *service.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type UserService_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *UserService_Expecter) GetUserByUsername(_a0 interface{}, _a1 interface{}) *UserService_GetUserByUsername_Call {
	return &UserService_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", _a0, _a1)}
}

func (_c *UserService_GetUserByUsername_Call) Run(run func(_a0 context.Context, _a1 string)) *UserService_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_GetUserByUsername_Call) Return(_a0 *service.User, _a1 error) *UserService_GetUserByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetUserByUsername_Call) RunAndReturn(run func(context.Context, string) (*service.User, error)) *UserService_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: _a0
func (_m *UserService) GetUsers(_a0 context.Context) ([]*service.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []*service.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*service.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*service.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*service.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type UserService_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *UserService_Expecter) GetUsers(_a0 interface{}) *UserService_GetUsers_Call {
	return &UserService_GetUsers_Call{Call: _e.mock.On("GetUsers", _a0)}
}

func (_c *UserService_GetUsers_Call) Run(run func(_a0 context.Context)) *UserService_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UserService_GetUsers_Call) Return(_a0 []*service.User, _a1 error) *UserService_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetUsers_Call) RunAndReturn(run func(context.Context) ([]*service.User, error)) *UserService_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function with given fields: _a0, _a1
func (_m *UserService) RegisterUser(_a0 context.Context, _a1 *service.User) (*service.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 *service.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.User) (*service.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *service.User) *service.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *service.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type UserService_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *service.User
func (_e *UserService_Expecter) RegisterUser(_a0 interface{}, _a1 interface{}) *UserService_RegisterUser_Call {
	return &UserService_RegisterUser_Call{Call: _e.mock.On("RegisterUser", _a0, _a1)}
}

func (_c *UserService_RegisterUser_Call) Run(run func(_a0 context.Context, _a1 *service.User)) *UserService_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*service.User))
	})
	return _c
}

func (_c *UserService_RegisterUser_Call) Return(_a0 *service.User, _a1 error) *UserService_RegisterUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_RegisterUser_Call) RunAndReturn(run func(context.Context, *service.User) (*service.User, error)) *UserService_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
