// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package repo

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, password_hash, roles, timezone)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, username, email, password_hash, timezone, created_at, updated_at, roles
`

type CreateUserParams struct {
	Username     string
	Email        string
	PasswordHash string
	Roles        []string
	Timezone     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.Roles,
		arg.Timezone,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Timezone,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Roles,
	)
	return &i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, roles, timezone FROM users
WHERE email = $1 LIMIT 1
`

type GetUserByEmailRow struct {
	ID       int32
	Username string
	Email    string
	Roles    []string
	Timezone string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Roles,
		&i.Timezone,
	)
	return &i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, roles, timezone FROM users
WHERE id = $1 LIMIT 1
`

type GetUserByIDRow struct {
	ID       int32
	Username string
	Email    string
	Roles    []string
	Timezone string
}

func (q *Queries) GetUserByID(ctx context.Context, id int32) (*GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Roles,
		&i.Timezone,
	)
	return &i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, roles, timezone FROM users
WHERE username = $1 LIMIT 1
`

type GetUserByUsernameRow struct {
	ID       int32
	Username string
	Email    string
	Roles    []string
	Timezone string
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (*GetUserByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Roles,
		&i.Timezone,
	)
	return &i, err
}

const getUserFullByEmail = `-- name: GetUserFullByEmail :one
SELECT id, username, email, password_hash, timezone, created_at, updated_at, roles FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserFullByEmail(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRow(ctx, getUserFullByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Timezone,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Roles,
	)
	return &i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, email, roles, timezone FROM users
`

type GetUsersRow struct {
	ID       int32
	Username string
	Email    string
	Roles    []string
	Timezone string
}

func (q *Queries) GetUsers(ctx context.Context) ([]*GetUsersRow, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Roles,
			&i.Timezone,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
