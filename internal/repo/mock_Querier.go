// Code generated by mockery v2.50.0. DO NOT EDIT.

package repo

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateUserParams) (User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, CreateUserParams) User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, CreateUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockQuerier_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg CreateUserParams
func (_e *MockQuerier_Expecter) CreateUser(ctx interface{}, arg interface{}) *MockQuerier_CreateUser_Call {
	return &MockQuerier_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, arg)}
}

func (_c *MockQuerier_CreateUser_Call) Run(run func(ctx context.Context, arg CreateUserParams)) *MockQuerier_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateUserParams))
	})
	return _c
}

func (_c *MockQuerier_CreateUser_Call) Return(_a0 User, _a1 error) *MockQuerier_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateUser_Call) RunAndReturn(run func(context.Context, CreateUserParams) (User, error)) *MockQuerier_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockQuerier) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 GetUserByEmailRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (GetUserByEmailRow, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) GetUserByEmailRow); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(GetUserByEmailRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockQuerier_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockQuerier_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockQuerier_GetUserByEmail_Call {
	return &MockQuerier_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockQuerier_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockQuerier_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_GetUserByEmail_Call) Return(_a0 GetUserByEmailRow, _a1 error) *MockQuerier_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (GetUserByEmailRow, error)) *MockQuerier_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *MockQuerier) GetUserByID(ctx context.Context, id int32) (GetUserByIDRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 GetUserByIDRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (GetUserByIDRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) GetUserByIDRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(GetUserByIDRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockQuerier_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockQuerier_Expecter) GetUserByID(ctx interface{}, id interface{}) *MockQuerier_GetUserByID_Call {
	return &MockQuerier_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, id)}
}

func (_c *MockQuerier_GetUserByID_Call) Run(run func(ctx context.Context, id int32)) *MockQuerier_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerier_GetUserByID_Call) Return(_a0 GetUserByIDRow, _a1 error) *MockQuerier_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetUserByID_Call) RunAndReturn(run func(context.Context, int32) (GetUserByIDRow, error)) *MockQuerier_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *MockQuerier) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 GetUserByUsernameRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (GetUserByUsernameRow, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) GetUserByUsernameRow); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(GetUserByUsernameRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type MockQuerier_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockQuerier_Expecter) GetUserByUsername(ctx interface{}, username interface{}) *MockQuerier_GetUserByUsername_Call {
	return &MockQuerier_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", ctx, username)}
}

func (_c *MockQuerier_GetUserByUsername_Call) Run(run func(ctx context.Context, username string)) *MockQuerier_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_GetUserByUsername_Call) Return(_a0 GetUserByUsernameRow, _a1 error) *MockQuerier_GetUserByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetUserByUsername_Call) RunAndReturn(run func(context.Context, string) (GetUserByUsernameRow, error)) *MockQuerier_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserFullByEmail provides a mock function with given fields: ctx, email
func (_m *MockQuerier) GetUserFullByEmail(ctx context.Context, email string) (User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserFullByEmail")
	}

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetUserFullByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserFullByEmail'
type MockQuerier_GetUserFullByEmail_Call struct {
	*mock.Call
}

// GetUserFullByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockQuerier_Expecter) GetUserFullByEmail(ctx interface{}, email interface{}) *MockQuerier_GetUserFullByEmail_Call {
	return &MockQuerier_GetUserFullByEmail_Call{Call: _e.mock.On("GetUserFullByEmail", ctx, email)}
}

func (_c *MockQuerier_GetUserFullByEmail_Call) Run(run func(ctx context.Context, email string)) *MockQuerier_GetUserFullByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_GetUserFullByEmail_Call) Return(_a0 User, _a1 error) *MockQuerier_GetUserFullByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetUserFullByEmail_Call) RunAndReturn(run func(context.Context, string) (User, error)) *MockQuerier_GetUserFullByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: ctx
func (_m *MockQuerier) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []GetUsersRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]GetUsersRow, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []GetUsersRow); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]GetUsersRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockQuerier_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) GetUsers(ctx interface{}) *MockQuerier_GetUsers_Call {
	return &MockQuerier_GetUsers_Call{Call: _e.mock.On("GetUsers", ctx)}
}

func (_c *MockQuerier_GetUsers_Call) Run(run func(ctx context.Context)) *MockQuerier_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_GetUsers_Call) Return(_a0 []GetUsersRow, _a1 error) *MockQuerier_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetUsers_Call) RunAndReturn(run func(context.Context) ([]GetUsersRow, error)) *MockQuerier_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
